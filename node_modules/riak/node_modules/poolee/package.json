{
  "name": "poolee",
  "version": "0.3.0",
  "description": "HTTP pool and load balancer",
  "homepage": "http://github.com/dannycoates/poolee",
  "author": {
    "name": "Danny Coates",
    "email": "dannycoates@gmail.com"
  },
  "keywords": [
    "pool",
    "http",
    "retry",
    "health",
    "load balancer"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/dannycoates/poolee.git"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "optimist": "*",
    "async": "*"
  },
  "readme": "# poolee\n\nHTTP pool and load balancer for node.\n\n# Example\n\n```javascript\n\nvar Pool = require(\"poolee\")\nvar http = require(\"http\")\n\nvar servers =\n  [\"127.0.0.1:8886\"\n  ,\"127.0.0.1:8887\"\n  ,\"127.0.0.1:8888\"\n  ,\"127.0.0.1:8889\"]\n\nvar postData = '{\"name\":\"Danny Coates\"}'\n\nvar pool = new Pool(http, servers, options)\n\npool.request(\n  { method: \"PUT\"\n  , path: \"/users/me\"\n  }\n, postData\n, function (error, response, body) {\n    if (error) {\n      console.error(error.message)\n      return\n    }\n    if(response.statusCode === 201) {\n      console.log(\"put succeeded\")\n    }\n    else {\n      console.log(response.statusCode)\n      console.log(body)\n    }\n  }\n)\n```\n\n---\n\n# API\n\n## Pool\n\n### new\n\n```javascript\nvar Pool = require('poolee')\n//...\n\nvar pool = new Pool(\n  http                     // the http module to use (require('http') or require('https'))\n  ,\n  [ \"127.0.0.1:1337\"       // array of endpoints in \"host:port\" form\n  , \"127.0.0.1:1338\"\n  ]\n  ,                        // options\n  { maxPending: 1000       // maximum number of outstanding request to allow\n  , maxSockets: 200        // max sockets per endpoint Agent\n  , timeout: 60000         // request timeout in ms\n  , resolution: 1000       // timeout check interval (see below)\n  , ping: undefined        // health check url\n  , pingTimeout: 2000      // ping timeout in ms\n  , retryFilter: undefined // see below\n  , retryDelay: 20         // see below\n  , name: undefined        // optional string\n  }\n)\n```\n\n###### maxPending\n\nOnce this threshold is reached, requests will return an error to the callback as a\nsignal to slow down the rate of requests.\n\n###### resolution\n\nPending requests have their timeouts checked at this rate. If your timeout is 60000\nand resolution is 1000, the request will timeout no later than 60999\n\n###### retryFilter\n\nAll valid http responses aren't necessarily a \"success\". This function lets you\ncheck the response before calling the request callback. Returning a \"truthy\" value\nwill retry the request.\n\nFor instance, we may want to always retry 500 responses by default:\n```javascript\noptions.retryFilter = function (\n    options  // the request.options\n  , response // the http response object\n  , body     // the response body\n  ) {\n  return response.statusCode === 500\n}\n```\n\nIf the returned value is `true` the next attempt will be delayed using exponential backoff;\nif its `Number` it will delay the next attempt by that many ms (useful for `Retry-After` headers)\n\n###### retryDelay\n\nPool uses exponential backoff when retrying requests. This value is a scaling factor of the\ntime (ms) to wait. Here's how it works:\n```javascript\nMath.random() * Math.pow(2, attemptNumber) * retryDelay\n```\nIf `retryDelay` is 20, attemptNumber 1 (the first retry) will delay at most 40ms\n\n###### ping\n\nWhen an endpoint is unresponsive the pool will not use it for requests. The ping\nurl gives a downed endpoint a way to rejoin the pool. If an endpoint is marked unhealthy\nand a ping url is given, the endpoint will make requests to its ping url until it gets\na 200 response, based on the `resolution` time.\n\nIf the ping url is undefined, the endpoint will never be marked unhealthy.\n\n\n### pool.request\n\nAn http request. The pool sends the request to one of it's endpoints. If it\nfails, the pool may retry the request on other endpoints until it succeeds or\nreaches `options.attempts` number of tries. *When `data` is a Stream, only 1\nattempt will be made*\n\n###### Usage\n\n\nThe first argument may be a url path.\nIf the callback has 3 arguments the full response body will be returned\n\n```javascript\npool.request('/users/me', function (error, response, body) {})\n```\n\nThe first argument may be an options object.\nHere's the default values:\n\n```javascript\npool.request(\n  { path: undefined        // the request path (required)\n  , method: 'GET'\n  , data: undefined        // request body, may be a string, buffer, or stream\n  , retryFilter: undefined // see below\n  , attempts: pool.length  // or at least 2, at most 5\n  , retryDelay: 20         // retries wait with exponential backoff times this number of ms\n  , timeout: 60000         // ms to wait before timing out the request\n  , encoding: 'utf8'       // response body encoding\n  , stream: false          // stream instead of buffer response body\n  }\n  ,\n  function (error, response, body) {}\n)\n```\n\nThe request body may be the second argument, instead of options.data (more\nuseful with `pool.post` and `pool.put`)\n\n```javascript\npool.request(\n  { path: '/foo' }\n  , 'hi there'\n  , function (error, response, body) {}\n)\n```\n\nA callback with 2 arguments will stream the response and not buffer the\nresponse body.\n\n```javascript\npool.request('/foo', function (error, response) {\n  response.pipe(somewhere)\n})\n```\n\n### pool.get\n\nJust a synonym for `request`\n\n### pool.put\n\nSame arguments as `request` that sets `options.method = 'PUT'`. Nice for\nputting :)\n\n```javascript\npool.put('/tweet/me', 'Hello World!', function (error, response) {})\n```\n\n### pool.post\n\nSame arguments as `request` that sets `options.method = 'POST'`\n\n### pool.del\n\nSame arguments as `request` that sets `options.method = 'DELETE'`\n\n---\n\n# Advanced\n\n## Make a pool\n```js\nvar pool = new Poolee(http, servers, options)\n```\n\n`servers`: array of strings formatted like 'ip:port'\n\n`options`: defaults and explanations below\n\n```js\n// options\n{\n  // number of pending requests allowed\n  maxPending: 1000\n\n  // ping path. (default = no ping checks)\n, ping: null\n\n, retryFilter: function (response) {\n    // return true to reject response and retry\n  }\n\n  // number in milliseconds\n, retryDelay: 20\n\n  // optional string name\n, name: null\n}\n```\n\n### Events emitted by `pool`:\n```js\npool.on('health', function(messageString) {\n  // message string of of the form:\n  // \"127.0.0.1:8888 health: true\"\n  // or\n  // \"127.0.0.1:8888 health: false\"\n})\n\npool.on('timeout', function(url) {\n  // where url is a ip+port+path combination for the timed-out request\n})\n\npool.on('retrying', function(error) { })\n\npool.on('timing', function(time, options) {\n  // `time`: the time the latest request took to complete\n  // `options`: options used to send the request\n})\n```\n\n\n### Get a healthy node\n    var node = pool.get_node()\n\nAttached to `node`:\n\n    // Counts of interest\n    // node.pending;\n    // node.successes\n    // node.failures\n    // node.requestRate\n\n    // node.ip;\n    // node.port;\n    // node.name = node.ip + ':' + node.port;\n\n### Events emitted by `node`\n```js\nnode.on('health', function(self) {\n  // `self` has all the same properties as `node`\n})\n\nnode.on('timeout', function (request) {\n  // the request that timed out\n})\n```\n\n### Example\n\nNote that this example should fail, because there won't be any nodes running.\nYou can also see this code in\n[`examples/`](https://github.com/dannycoates/poolee/tree/master/examples).\n\n#### `client.js`\n```js\nvar Poolee = require('../')\n  , http = require('http')\n  , ms = require('ms') // converts a time to milliseconds\n  , servers = [ '127.0.0.1:8080', '127.0.0.1:8081', '127.0.0.1:8082' ]\n  , pool = null\n\n  // healthiest node, populated later on\n  , active_node = null\n\npool = new Poolee(http, servers)\n\npool.on('retrying', function(error) {\n  console.log(error.message);\n})\n\nconsole.log('fib(40) = ...calculating on worker.js...');\npool.request(\n  { method: 'GET'\n  , path: '/'\n  }\n, function (error, response, body) {\n    if (error) {\n      console.error(error.message)\n      return\n    }\n    if (response.statusCode === 200) {\n      console.log(body)\n\n    } else {\n      console.log(response.statusCode)\n      console.log(body)\n    }\n  }\n)\n```\n\nRun this before the above script, then see what happens.\n\n#### `worker.js`\n```js\n// An http server that does things for you!\n// Do not write your fib server this way, instead use\n// https://gist.github.com/2018811 which this code is based on.\nvar http = require('http')\nvar PORT = process.argv[2]\n\nfunction fib(n) {\n  if (n < 2) {\n    return 1\n  } else {\n    return fib(n - 2) + fib(n - 1)\n  }\n}\n\nvar server = http.createServer(function(req, res) {\n  res.writeHead(200)\n  res.end(fib(40) + \"\\n\")\n})\nserver.listen(PORT)\nconsole.log(\"worker.js online at http://localhost:\" + PORT)\n```\n\nTo see a pool that is 100% healthy:\n\n```sh\nnode ./worker.js 8080 &\nnode ./worker.js 8081 &\nnode ./worker.js 8082 &\n\necho \"running client.js ...\"\nnode ./client.js\n```\n\n## Running tests\n```sh\nnpm -g install mocha\nmocha\n```\n",
  "_id": "poolee@0.3.0",
  "_from": "poolee@*"
}
